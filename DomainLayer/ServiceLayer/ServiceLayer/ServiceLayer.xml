<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceLayer</name>
    </assembly>
    <members>
        <member name="T:ServiceLayer.Implementations.ApplicationSettingService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.ApplicationSetting"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.#ctor(DataMapper.DAO.ApplicationSettingDataService)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.ApplicationSettingService"/> class.
            </summary>
            <param name="applicationSettingDataService">The application setting data service.</param>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetValueAsString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetValueAsInt(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetValueAsBool(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetValueAsDecimal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.ApplicationSettingService.GetValueAsDouble(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ServiceLayer.Implementations.AuctionService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.Auction"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.AuctionService.#ctor(DataMapper.DAO.AuctionDataService,DataMapper.Interfaces.IProductDataService,DataMapper.DAO.ApplicationSettingDataService,DataMapper.DAO.AuctionPlacingRestrictionsDataService,DataMapper.DAO.UserDataService,DataMapper.DAO.CategoryDataService,Microsoft.Extensions.Logging.ILogger{ServiceLayer.Implementations.AuctionService})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.AuctionService"/> class.
            </summary>
            <param name="auctionDataService">The auction data service.</param>
            <param name="productDataService">The product data service.</param>
            <param name="applicationSettingDataService">The application setting data service.</param>
            <param name="auctionPlacingRestrictionsDataService">The auction placing restrictions data service.</param>
            <param name="userDataService">The user data service.</param>
            <param name="categoryDataService">The category data service.</param>
        </member>
        <member name="M:ServiceLayer.Implementations.AuctionService.Add(DomainModel.Models.Auction)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.AuctionService.HasReachedMaxNumberOfOpenedAuctions(System.String)">
            <summary>
            Checks if the user has surpassed the max number of open auctions.
            </summary>
            <param name="userId">The ID of the user.</param>
            <returns>A boolean indicating whether the max number of open auctions was reached.</returns>
        </member>
        <member name="M:ServiceLayer.Implementations.AuctionService.Update(DomainModel.Models.Auction)">
            <inheritdoc/>
        </member>
        <member name="T:ServiceLayer.Implementations.BaseService`3">
            <summary>
            Base service to provide common functionality.
            </summary>
            <typeparam name="TE">The Entity.</typeparam>
            <typeparam name="TS">The Service that corresponds to the Entity.</typeparam>
            <typeparam name="TV">The Validator that coresponds to the Entity.</typeparam>
        </member>
        <member name="F:ServiceLayer.Implementations.BaseService`3.service">
            <summary>
            The service that corresponds to the entity managed by this service.
            </summary>
        </member>
        <member name="F:ServiceLayer.Implementations.BaseService`3.validator">
            <summary>
            The validator that corresponds to the entity managed by this service.
            </summary>
        </member>
        <member name="F:ServiceLayer.Implementations.BaseService`3.logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.#ctor(`1,`2,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.BaseService`3"/> class.
            </summary>
            <param name="service">The service that corresponds to the entity managed by this service.</param>
            <param name="validator">The validator that corresponds to the entity managed by this service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.Delete(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.GetById(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.List">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.BaseService`3.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="T:ServiceLayer.Implementations.BidService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.Bid"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.BidService.#ctor(DataMapper.DAO.BidDataService,DataMapper.DAO.AuctionDataService,DataMapper.DAO.UserDataService,Microsoft.Extensions.Logging.ILogger{ServiceLayer.Implementations.BidService})">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.BidService"/> class.
            </summary>
            <param name="bidDataService">The bid data service.</param>
            <param name="auctionDataService">The auction data service.</param>
            <param name="userDataService">The user data service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:ServiceLayer.Implementations.BidService.Add(DomainModel.Models.Bid)">
            <inheritdoc/>
        </member>
        <member name="M:ServiceLayer.Implementations.BidService.Update(DomainModel.Models.Bid)">
            <inheritdoc/>
        </member>
        <member name="T:ServiceLayer.Implementations.CategoryService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.Category"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.CategoryService.#ctor(DataMapper.DAO.CategoryDataService)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.CategoryService"/> class.
            </summary>
            <param name="categoryDataService">The data service.</param>
        </member>
        <member name="T:ServiceLayer.Implementations.ProductService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.Product"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.ProductService.#ctor(DataMapper.DAO.ProductDataService)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.ProductService"/> class.
            </summary>
            <param name="productDataService">The data service.</param>
        </member>
        <member name="T:ServiceLayer.Implementations.ScoreService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.Score"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.ScoreService.#ctor(DataMapper.DAO.ScoreDataService,DataMapper.DAO.AuctionPlacingRestrictionsDataService,DataMapper.DAO.ApplicationSettingDataService)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.ScoreService"/> class.
            </summary>
            <param name="scoreDataService">The score data service.</param>
            <param name="auctionPlacingRestrictionsDataService">The auction placing restrictions data service.</param>
            <param name="applicationSettingDataService">The application setting data service.</param>
        </member>
        <member name="M:ServiceLayer.Implementations.ScoreService.Add(DomainModel.Models.Score)">
            <inheritdoc/>
        </member>
        <member name="T:ServiceLayer.Implementations.UserService">
            <summary>
            Provides services regarding the <see cref="T:DomainModel.Models.User"/>.
            </summary>
        </member>
        <member name="M:ServiceLayer.Implementations.UserService.#ctor(DataMapper.DAO.UserDataService)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceLayer.Implementations.UserService"/> class.
            </summary>
            <param name="userDataService">The user data service.</param>
        </member>
        <member name="T:ServiceLayer.Interfaces.IApplicationSettingService">
            <summary>
            Interface for the Application settings service.
            </summary>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetByName(System.String)">
            <summary>
            Gets an application setting by its name..
            </summary>
            <param name="name">The name.</param>
            <returns>ApplicationSetting.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetValueAsString(System.String)">
            <summary>
            Returns the value of the setting as a string if it exists.
            </summary>
            <param name="name">The name of the setting.</param>
            <returns>The value of the setting as string.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetValueAsInt(System.String)">
            <summary>
            Returns the value of the setting as an int if it exists.
            </summary>
            <param name="name">The name of the setting.</param>
            <returns>The value of the setting as int.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetValueAsBool(System.String)">
            <summary>
            Returns the value of the setting as a bool if it exists.
            </summary>
            <param name="name">The name of the setting.</param>
            <returns>The value of the setting as bool.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetValueAsDecimal(System.String)">
            <summary>
            Returns the value of the setting as a decimal if it exists.
            </summary>
            <param name="name">The name of the setting.</param>
            <returns>The value of the setting as decimal.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IApplicationSettingService.GetValueAsDouble(System.String)">
            <summary>
            Gets the value as double.
            </summary>
            <param name="name">The name.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:ServiceLayer.Interfaces.IAuctionService">
            <summary>
            Interface for the auction Service.
            </summary>
        </member>
        <member name="T:ServiceLayer.Interfaces.IBidService">
            <summary>
            Interface for the Bid Service.
            </summary>
        </member>
        <member name="T:ServiceLayer.Interfaces.ICategoryService">
            <summary>
            Interface for the Category Service.
            </summary>
        </member>
        <member name="T:ServiceLayer.Interfaces.IProductService">
            <summary>
            Interface for the Product Service.
            </summary>
        </member>
        <member name="T:ServiceLayer.Interfaces.IScoreService">
            <summary>
            Interface for the score service.
            </summary>
        </member>
        <member name="T:ServiceLayer.Interfaces.IService`1">
            <summary>
            Interface to be implemented by all services. Provides basic crud functionality.
            </summary>
            <typeparam name="T">The entity that this Service works with.</typeparam>
        </member>
        <member name="M:ServiceLayer.Interfaces.IService`1.Add(`0)">
            <summary>
            Adds an entity.
            </summary>
            <param name="entity">The entity to be added.</param>
        </member>
        <member name="M:ServiceLayer.Interfaces.IService`1.Delete(`0)">
            <summary>
            Deletes an entity.
            </summary>
            <param name="entity">Entity to be deleted.</param>
        </member>
        <member name="M:ServiceLayer.Interfaces.IService`1.List">
            <summary>
            Retrieves a list with all entities.
            </summary>
            <returns>All the entities of this type.</returns>
        </member>
        <member name="M:ServiceLayer.Interfaces.IService`1.Update(`0)">
            <summary>
            Updates an entity.
            </summary>
            <param name="entity">The updated entity.</param>
        </member>
        <member name="M:ServiceLayer.Interfaces.IService`1.GetById(System.Int64)">
            <summary>
            Gets an entity by its Id.
            </summary>
            <param name="id">Id of the entity to be retrieved.</param>
            <returns>The entity that has a corresponding id to <paramref name="id"/>.</returns>
        </member>
        <member name="T:ServiceLayer.Interfaces.IUserService">
            <summary>
            Interface for the User service.
            </summary>
        </member>
    </members>
</doc>
